#基本配置(端口号，页面编码格式)
server.port=8090
server.tomcat.uri-encoding=UTF-8
#JDBC配置
#spring.datasource.other.jdbc-url=jdbc:mysql://localhost:3306/test?autoReconnect=true&useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
#spring.datasource.other.username=
#spring.datasource.other.password=
job.zookeeper.server=localhost:2181
job.zookeeper.namespace=test-job
job.event.enable

spring.datasource.other.jdbc-url=jdbc:mysql://114.55.37.75:3306/exam2020?useunicode=true&characterencoding=utf-8&usessl=false&tinyint1isbit=false&autoreconnect=true
spring.datasource.other.username=exam2020
spring.datasource.other.password=@Exam2020
#spring.datasource.other.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.other.max-idle=10
spring.datasource.other.max-wait=10000
spring.datasource.other.min-idle=5
spring.datasource.other.initial-size=5
#JPA相关配置
spring.jpa.show-sql=true
spring.jpa.hibernate.naming-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# security
#spring.security.user.name=admin
#spring.security.user.password=admin
# cache
spring.redis.host=47.101.149.126
spring.redis.port=6379
spring.redis.password=88888888
spring.redis.jedis.pool.max-idle=8
spring.redis.jedis.pool.max-wait=
spring.redis.jedis.pool.min-idle=0
# 滚动日志记录
logging.config=classpath:logback.xml


###########【Kafka集群】###########
spring.kafka.bootstrap-servers=localhost:9092
###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 批量大小
spring.kafka.producer.batch-size=16384
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
​
# 生产端缓冲区大小
#spring.kafka.producer.buffer-memory = 33554432
## Kafka提供的序列化和反序列化类
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
## 自定义分区器
## spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
#​
##kafka配置
############【初始化消费者配置】###########
## 默认的消费组ID
#spring.kafka.consumer.properties.group.id=defaultConsumerGroup
## 是否自动提交offset
#spring.kafka.consumer.enable-auto-commit=true
## 提交offset延时(接收到消息后多久提交offset)
#spring.kafka.consumer.auto.commit.interval.ms=1000
## 当kafka中没有初始offset或offset超出范围时将自动重置offset
## earliest:重置为分区中最小的offset;
## latest:重置为分区中最新的offset(消费分区中新产生的数据);
## none:只要有一个分区不存在已提交的offset,就抛出异常;
#spring.kafka.consumer.auto-offset-reset=latest
## 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
#spring.kafka.consumer.properties.session.timeout.ms=120000
## 消费请求超时时间
#spring.kafka.consumer.properties.request.timeout.ms=180000
## Kafka提供的序列化和反序列化类
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
## 消费端监听的topic不存在时，项目启动会报错(关掉)
#spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50